name: Build and Release

on:
  push:
    tags:
      - "server/v*" # Triggers on tags like server/v1.2.3, etc.

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }} # hydraide/hydraide

jobs:
  release:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            binary_name: hydraide-linux-amd64
            asset_name: hydraide-linux-amd64

          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            binary_name: hydraide-linux-arm64
            asset_name: hydraide-linux-arm64

          - os: windows-latest
            goos: windows
            goarch: amd64
            binary_name: hydraide-windows-amd64.exe
            asset_name: hydraide-windows-amd64.exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        shell: bash
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          go build -a -installsuffix cgo -o ${{ matrix.binary_name }} ./app/server

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: hydraide-${{ matrix.goos }}-${{ matrix.goarch }}
          path: ${{ matrix.binary_name }}

  create_release:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version
        id: extract_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts

      - name: Move downloaded binaries to root for release
        run: |
          mv ./artifacts/hydraide-linux-amd64/hydraide-linux-amd64 .
          mv ./artifacts/hydraide-linux-arm64/hydraide-linux-arm64 .
          mv ./artifacts/hydraide-windows-amd64/hydraide-windows-amd64.exe .

      - name: Create GitHub release with assets
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.extract_version.outputs.version }}
          name: Release ${{ steps.extract_version.outputs.version }}
          artifacts: "hydraide-linux-amd64,hydraide-linux-arm64,hydraide-windows-amd64.exe"
          generateReleaseNotes: true
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}


  docker-publish:
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download amd64 binary
        uses: actions/download-artifact@v4
        with:
          name: hydraide-linux-amd64
          path: docker-context/

      - name: Download arm64 binary
        uses: actions/download-artifact@v4
        with:
          name: hydraide-linux-arm64
          path: docker-context/

      - name: Rename binaries
        run: |
          mv docker-context/hydraide-linux-amd64 docker-context/hydraide-amd64
          mv docker-context/hydraide-linux-arm64 docker-context/hydraide-arm64

      - name: Copy entrypoint script
        run: |
          mkdir -p docker-context/scripts
          cp entrypoint.sh docker-context/scripts/

      - name: Copy Dockerfile
        run: cp Dockerfile docker-context/

      - name: Install cosign
        uses: sigstore/cosign-installer@v3.9.2
        with:
          cosign-release: "v2.5.3"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3.6.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.9.0

      - name: Log into registry ${{ env.REGISTRY }}
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.HYDRAIDE_DOCKER_USERNAME }}
          password: ${{ secrets.HYDRAIDE_DOCKER_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=match,pattern=.*/v(.*),group=1
            type=raw,value=latest

      - name: Build and push multi-arch Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./docker-context
          platforms: linux/amd64,linux/arm64
          push: true
          build-args: |
            TARGETARCH
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Sign the published Docker image
        if: steps.build-and-push.outputs.digest != ''
        env:
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        run: |
          echo "$TAGS" | tr ',' '\n' | while read tag; do
            echo "â†’ Signing $tag@$DIGEST"
            cosign sign --yes "$tag@$DIGEST"
          done

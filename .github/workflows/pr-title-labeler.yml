name: PR Title Labeler

on:
  pull_request_target:
    types: [opened, edited, reopened, synchronize, ready_for_review]

permissions:
  contents: read
  issues: write

concurrency:
  group: pr-title-labeler-${{ github.event.pull_request.number }}
  cancel-in-progress: false

jobs:
  label-by-title:
    runs-on: ubuntu-latest
    steps:
      - name: Ensure type labels exist (idempotent)
        uses: actions/github-script@v7
        with:
          script: |
            const wanted = [
              { name: 'type:bug',        color: 'd73a4a', description: 'Bug fix' },
              { name: 'type:enhancement', color: 'a2eeef', description: 'New feature / enhancement' },
              { name: 'type:docs',       color: '0075ca', description: 'Documentation' },
              { name: 'type:refactor',   color: 'c5def5', description: 'Refactor' },
              { name: 'type:chore',      color: 'ededed', description: 'Chore / maintenance' },
            ];
            for (const lbl of wanted) {
              try {
                await github.rest.issues.getLabel({
                  owner: context.repo.owner, repo: context.repo.repo, name: lbl.name
                });
              } catch (e) {
                if (e.status === 404) {
                  await github.rest.issues.createLabel({
                    owner: context.repo.owner, repo: context.repo.repo,
                    name: lbl.name, color: lbl.color, description: lbl.description
                  });
                } else {
                  throw e;
                }
              }
            }

      - name: Label or warn based on PR title
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = (pr.title || '').toLowerCase().trim();
            const labelsToAdd = [];

            if (title.startsWith('fix:')) {
              labelsToAdd.push('type:bug');
            } else if (title.startsWith('feat:') || title.startsWith('feature:')) {
              labelsToAdd.push('type:enhancement');
            } else if (title.startsWith('docs:')) {
              labelsToAdd.push('type:docs');
            } else if (title.startsWith('refactor:')) {
              labelsToAdd.push('type:refactor');
            } else if (title.startsWith('chore:')) {
              labelsToAdd.push('type:chore');
            }

            if (labelsToAdd.length > 0) {
              // addLabels idempotens, nem duplikÃ¡l
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labelsToAdd
              });
            } else {
              // Ne kommenteljÃ¼nk tÃ¶bbszÃ¶r ugyanazzal a figyelmeztetÃ©ssel
              const { data: comments } = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                per_page: 100
              });
              const alreadyCommented = comments.some(c =>
                c.user?.type === 'Bot' &&
                typeof c.body === 'string' &&
                c.body.includes('ðŸš¨ **PR Title Lacks Prefix**')
              );
              if (!alreadyCommented) {
                const warning = [
                  "ðŸš¨ **PR Title Lacks Prefix**",
                  "",
                  "Please use a [conventional commit](https://www.conventionalcommits.org/en/v1.0.0/) style prefix in your PR title:",
                  "- `fix:` for bug fixes",
                  "- `feat:` for features",
                  "- `docs:` for documentation",
                  "- `refactor:` for code improvements",
                  "- `chore:` for maintenance tasks",
                  "",
                  "_Example: `fix: handle nil pointer panic`_",
                  "",
                  "This helps us automatically classify your PR. Thanks! ðŸ™Œ"
                ].join("\n");
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr.number,
                  body: warning
                });
              }
            }
